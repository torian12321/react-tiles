{"version":3,"sources":["components/BtnReset/BtnReset.module.scss","components/Board/Board.module.scss","redux/selectors/board.selectors.ts","redux/actions/action.types.ts","redux/actions/board.actions.ts","hooks/useCancellablePromises.js","hooks/useOnDoubleClick.ts","hooks/useLongPress.js","components/Tile/Tile.tsx","components/Tile/index.ts","components/Tile/Tile.container.tsx","components/Board/Board.tsx","components/Board/Board.container.tsx","components/BtnReset/undo.svg","components/BtnReset/BtnReset.tsx","components/BtnReset/BtnReset.container.tsx","App.tsx","redux/reducers/board.reducers.ts","redux/reducers/common.reducers.ts","redux/reducers/index.ts","redux/store/index.ts","reportWebVitals.ts","index.tsx","components/Tile/Tile.module.scss"],"names":["module","exports","getBoardState","state","board","getOptions","createSelector","options","getSelectedAreaOptions","selectedArea","getTilesState","tiles","getTilesList","allIds","getTilesById","byIds","getTileById","tileId","tile","selected","getTileIsSelected","getFlippedTiles","Object","values","filter","flipped","map","id","getTileseOnSelectedArea","iniTile","endTile","tilesArr","onRange","val","margin1","margin2","ini","find","end","x","y","includes","BOARD_RESET","BOARD_SELECTEDAREA_UNSET","BOARD_SELECTEDAREA_SET_INI","BOARD_SELECTEDAREA_SET_END","TILES_TOGGLE","tilesToggle","tilesId","type","payload","ids","columnToggle","dispatch","getState","col","byId","getTileByCol","t","boardSelectedAreaUnset","boardSelectedAreaSetEndTile","boardSelectedAreaSetEndTileAction","useCancellablePromises","pendingPromises","useRef","appendPendingPromise","promise","current","removePendingPromise","p","clearPendingPromises","cancel","useOnDoubleClick","onClick","onDoubleClick","api","delay","get","waitForClick","isCanceled","Promise","resolve","reject","then","value","error","cancellablePromise","n","setTimeout","delayFunc","catch","errorInfo","preventDefault","event","isTouchEvent","touches","length","useLongPress","onLongPress","shouldPreventDefault","useState","longPressTriggered","setLongPressTriggered","timeout","target","start","useCallback","addEventListener","passive","clear","shouldTriggerClick","clearTimeout","removeEventListener","onMouseDown","e","onTouchStart","onMouseUp","onMouseLeave","onTouchEnd","Tile","isFlipped","isSelected","onMouseEnter","handleDoubleClick","longPressEvent","className","classNames","styles","wrapper","aria-label","connect","ownProps","iniTileId","React","memo","Row","row","Board","columns","list","howMany","idx","result","push","arrayTo2DArray2","tilesInRow","i","BtnReset","disabled","btn","src","logo","alt","App","iniSelectedArea","undefined","initialState","size","count","toString","buildBoard2","rows","reducer","action","updatedTiles","forEach","name","rootReducer","combineReducers","common","store","createStore","composeWithDevTools","applyMiddleware","thunk","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a3696bf0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"BtnReset_btn__9ZNb5\",\"disabled\":\"BtnReset_disabled__2z6ma\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__kNpEF\",\"row\":\"Board_row__2hIxt\"};","import { createSelector } from 'reselect';\nimport { AppState } from '../reducers';\nimport { State as StateBoard, Options, SelectedArea, Tile, Tiles } from '../reducers/board.reducers';\n\nconst getBoardState = (state: AppState): StateBoard =>\n  state.board || state || {};\n\nexport const getOptions = createSelector(\n  getBoardState,\n  (board: StateBoard): Options =>\n  board.options || {}\n);\n\nexport const getSelectedAreaOptions = createSelector(\n  getBoardState,\n  (board: StateBoard): SelectedArea =>\n  board.selectedArea || {}\n);\n\n// Tiles Selectors\nconst getTilesState = createSelector(\n  getBoardState,\n  (board: StateBoard): Tiles =>\n  board.tiles || {}\n);\n\nexport const getTilesList = createSelector(\n  getTilesState,\n  (tiles: Tiles): string[] =>\n  tiles.allIds || []\n);\nconst getTilesById = createSelector(\n  getTilesState,\n  (tiles: Tiles): any =>\n  tiles.byIds || {}\n);\n\nexport const getTileById = (state: AppState, tileId: string): Tile & { selected: boolean } => {\n  const tile = getTilesById(state)[tileId] || {};\n  return {\n    ...tile,\n    selected: getTileIsSelected(state, tileId),\n  }\n}\n  \n\nexport const getTileByCol = (state: AppState, col: number): Tile[] => {\n  const byId = getTilesState(state).byIds || {};\n\n  return Object.values(byId)\n    .filter((tile: Tile) => tile.y === col);\n};\n\nexport const getFlippedTiles = createSelector(\n  getTilesById,\n  (tiles: Tiles): string[] =>\n    Object.values(tiles)\n      .filter((tile: Tile) => !!tile.flipped)\n      .map((tile: Tile) => tile.id)\n);\n\nexport const getTileseOnSelectedArea = createSelector(\n  [getTilesById, getSelectedAreaOptions],\n  (tiles: Tiles, selectedArea: SelectedArea): string[] => {\n    const { iniTile, endTile } = selectedArea;\n    const tilesArr = Object.values(tiles);\n  \n    if (!iniTile || !endTile) {\n      return [];\n    };\n    if (iniTile === endTile) {\n      return [iniTile];\n    };\n\n    const onRange = (val: number, margin1: number, margin2: number) => !!(\n      (val >= margin1 && val <= margin2) ||\n      (val >= margin2 && val <= margin1)\n    );\n\n    const ini = tilesArr.find((tile: Tile) => tile.id === iniTile);\n    const end = tilesArr.find((tile: Tile) => tile.id === endTile);\n\n    return tilesArr\n      .filter((tile: Tile) => (\n        // Get tiles on the 'square' of the aera\n        onRange(tile.x, ini.x, end.x) &&\n        onRange(tile.y, ini.y, end.y)\n      ))\n      .map((tile: Tile) => tile.id);;\n  }\n);\n\n// Detect if the tile is under selected area\nexport const getTileIsSelected = (state: AppState, tileId: string): boolean =>\n  !!getTileseOnSelectedArea(state).includes(tileId);\n","export const BOARD_RESET = \"BOARD_RESET\";\n\nexport const BOARD_SELECTEDAREA_UNSET = \"BOARD_SELECTEDAREA_UNSET\";\nexport const BOARD_SELECTEDAREA_SET_INI = \"BOARD_SELECTEDAREA_SET_INI\";\nexport const BOARD_SELECTEDAREA_SET_END = \"BOARD_SELECTEDAREA_SET_END\";\n\nexport const TILES_TOGGLE = \"TILES_TOGGLE\";\n","import {\n  BOARD_RESET,\n  TILES_TOGGLE,\n  BOARD_SELECTEDAREA_UNSET,\n  BOARD_SELECTEDAREA_SET_INI,\n  BOARD_SELECTEDAREA_SET_END,\n} from './action.types';\nimport { getTileById, getTileByCol, getSelectedAreaOptions, getTileseOnSelectedArea } from '../selectors/board.selectors';\nimport { Tile } from '../reducers/board.reducers';\n\nexport const boardReset = () => ({\n  type: BOARD_RESET,\n});\n\nexport const tilesToggle = (\n  tilesId: string[] = [],\n  flipped: boolean = false\n) => ({\n  type: TILES_TOGGLE,\n  payload: {\n    ids: tilesId,\n    flipped,\n  },\n});\n\nexport const tileToggle = (tileId: string): Object => (\n  dispatch: any,\n  getState: Function\n) => {\n  const state = getState();\n  const tile = getTileById(state, tileId);\n\n  dispatch(tilesToggle(\n    [tile.id],\n    !tile.flipped\n  ));\n};\n\n// Flip the full column from the indicated tale\nexport const columnToggle = (tileId: string): Object => (\n  dispatch: any,\n  getState: Function\n) => {\n  const state = getState();\n  const tile = getTileById(state, tileId);\n\n  dispatch(tilesToggle(\n    getTileByCol(state, tile.y).map((t: Tile) => t.id),\n    !tile.flipped\n  ));\n};\n\n// Flip all tiles on selectedArea based on initila tile selected\nexport const areaToggle = (): Object => (\n  dispatch: any,\n  getState: Function\n) => {\n  const state = getState();\n  const iniTileId = getSelectedAreaOptions(state).iniTile;\n\n  if(!!iniTileId) {\n    const tile = getTileById(state, iniTileId);\n\n    dispatch(tilesToggle(\n      getTileseOnSelectedArea(state),\n      !tile.flipped\n    ));\n  };\n};\n\nexport const boardSelectedAreaUnset = () => ({\n  type: BOARD_SELECTEDAREA_UNSET,\n});\nexport const boardSelectedAreaSetIniTile = (tileId: string) => ({\n  type: BOARD_SELECTEDAREA_SET_INI,\n  payload: {\n    iniTile: tileId,\n  },\n});\nconst boardSelectedAreaSetEndTileAction = (tileId: string) => ({\n  type: BOARD_SELECTEDAREA_SET_END,\n  payload: {\n    endTile: tileId,\n  },\n});\n\nexport const boardSelectedAreaSetEndTile = (tileId: string): Object => (\n  dispatch: any,\n  getState: Function\n) => {\n  const state = getState();\n  const iniTileId = getSelectedAreaOptions(state).iniTile;\n\n  if(!!iniTileId) {\n    dispatch (boardSelectedAreaSetEndTileAction(tileId));\n  };\n};","import { useRef } from \"react\";\n\nconst useCancellablePromises = () => {\n  const pendingPromises = useRef([]);\n\n  const appendPendingPromise = promise =>\n    pendingPromises.current = [...pendingPromises.current, promise];\n\n  const removePendingPromise = promise =>\n    pendingPromises.current = pendingPromises.current.filter(p => p !== promise);\n\n  const clearPendingPromises = () => pendingPromises.current.map(p => p.cancel());\n\n  const api = {\n    appendPendingPromise,\n    removePendingPromise,\n    clearPendingPromises,\n  };\n\n  return api;\n};\n\nexport default useCancellablePromises;\n","// https://medium.com/trabe/prevent-click-events-on-double-click-with-react-with-and-without-hooks-6bf3697abc40\n\nimport { get } from 'lodash';\nimport useCancellablePromises from './useCancellablePromises';\n\nconst DELAY_DEFAULT = 250;\n\nconst delayFunc = (n: number = DELAY_DEFAULT) => new Promise(resolve => setTimeout(resolve, n));\nconst cancellablePromise = (promise: Promise<any>) => {\n  let isCanceled = false;\n\n  const wrappedPromise = new Promise((resolve, reject) => {\n    promise.then(\n      (value: boolean) => (isCanceled ? reject({ isCanceled, value }) : resolve(value)),\n      (error: any) => reject({ isCanceled, error }),\n    );\n  });\n\n  return {\n    promise: wrappedPromise,\n    cancel: () => (isCanceled = true),\n  };\n};\n\nexport const useOnDoubleClick = (\n  onClick: Function,\n  onDoubleClick: Function,\n  options?: {\n    delay: number,\n  }\n) => {\n  const api = useCancellablePromises();\n  const delay = get(options, 'delay', DELAY_DEFAULT)\n\n  const handleClick = () => {\n    api.clearPendingPromises();\n    const waitForClick = cancellablePromise(delayFunc(delay));\n    api.appendPendingPromise(waitForClick);\n\n    \n\n    return waitForClick.promise\n      .then(() => {\n        api.removePendingPromise(waitForClick);\n        onClick();\n      })\n      .catch(errorInfo => {\n        api.removePendingPromise(waitForClick);\n        if (!errorInfo.isCanceled) {\n          throw errorInfo.error;\n        }\n      });\n  };\n\n  const handleDoubleClick = () => {\n    api.clearPendingPromises();\n    onDoubleClick();\n  };\n\n  return [handleClick, handleDoubleClick];\n};\n\nexport default useOnDoubleClick;\n","import { useCallback, useRef, useState } from \"react\";\n\nconst useLongPress = (\n  {\n    onClick,\n    onLongPress,\n  },\n  {\n    shouldPreventDefault = true,\n    delay = 100,\n  } = {}\n) => {\n  const [longPressTriggered, setLongPressTriggered] = useState(false);\n  const timeout = useRef();\n  const target = useRef();\n\n  const start = useCallback(event => {\n      if (shouldPreventDefault && event.target) {\n          event.target.addEventListener(\"touchend\", preventDefault, {\n          passive: false\n        });\n        target.current = event.target;\n      }\n      timeout.current = setTimeout(() => {\n        onLongPress(event);\n        setLongPressTriggered(true);\n      }, delay);\n    },\n    [onLongPress, delay, shouldPreventDefault]\n  );\n\n  const clear = useCallback((event, shouldTriggerClick = true) => {\n      timeout.current && clearTimeout(timeout.current);\n      shouldTriggerClick && !longPressTriggered && onClick();\n      setLongPressTriggered(false);\n      if (shouldPreventDefault && target.current) {\n        target.current.removeEventListener(\"touchend\", preventDefault);\n      }\n    },\n    [shouldPreventDefault, onClick, longPressTriggered]\n  );\n\n  return {\n    onMouseDown: e => start(e),\n    onTouchStart: e => start(e),\n    onMouseUp: e => clear(e),\n    onMouseLeave: e => clear(e, false),\n    onTouchEnd: e => clear(e),\n  };\n};\n\nconst isTouchEvent = event => \"touches\" in event;\n\nconst preventDefault = event => {\n  if (!isTouchEvent(event)) return;\n\n  if (event.touches.length < 2 && event.preventDefault) {\n    event.preventDefault();\n  }\n};\n\nexport default useLongPress;","import React from 'react';\nimport classNames from 'classnames';\nimport { Props, State } from './Tile.interfaces';\nimport styles from './Tile.module.scss';\nimport useOnDoubleClick from \"../../hooks/useOnDoubleClick\";\nimport useLongPress from \"../../hooks/useLongPress\";\n\n\nconst Tile: React.FunctionComponent<Props & State> = ({\n  id, isFlipped = false, isSelected = false,\n  onClick = (e: Event) => {},\n  onDoubleClick= (e: Event) => {},\n  onMouseEnter = (e: Event) => {},\n  onLongPress = (e: Event) => {},\n  onMouseUp = (e: Event) => {},\n}: Props & State) => {\n  // eslint-disable-next-line\n  const [handleClick, handleDoubleClick] = useOnDoubleClick(onClick, onDoubleClick);\n  const longPressEvent = useLongPress({ onLongPress, onClick });\n\n  return (\n    <div\n      onMouseEnter={() => onMouseEnter()}\n      onMouseUp={()=> onMouseUp()}\n      className={classNames(\n        styles.wrapper,\n        isFlipped && styles.flipped,\n        isSelected && styles.selected,\n      )}\n    >\n      <button\n        aria-label={`tile-${id}`}\n        {...longPressEvent}\n        onDoubleClick={handleDoubleClick}\n        \n        className={styles.tile}\n      >{id}\n      </button>\n    </div>\n  );\n};\n\nexport default Tile;\n","import Tile from './Tile.container';\n\nexport default Tile;\nexport { Tile };\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { getTileById } from '../../redux/selectors/board.selectors';\nimport { AppState } from '../../redux/reducers';\nimport {\n  tileToggle,\n  columnToggle,\n  boardSelectedAreaSetEndTile,\n  boardSelectedAreaSetIniTile,\n  areaToggle,\n  boardSelectedAreaUnset,\n} from '../../redux/actions/board.actions';\nimport Tile from './Tile';\nimport { Props, State } from './Tile.interfaces';\n\nconst mapState = (state: AppState, ownProps: Props): Props => {\n  const tile = getTileById(state, ownProps.id);\n\n  return {\n    id: tile.id,\n    isFlipped: tile.flipped,\n    isSelected: tile.selected,\n  };\n};\nconst mapDispatchToProps = (dispatch: Function, ownProps: Props): State => ({\n  onClick: () => dispatch(tileToggle(ownProps.id)),\n  onDoubleClick: () => dispatch(columnToggle(ownProps.id)),\n  onMouseEnter: () => dispatch(boardSelectedAreaSetEndTile(ownProps.id)),\n  onLongPress: () => {\n    dispatch(boardSelectedAreaSetIniTile(ownProps.id));\n    dispatch(boardSelectedAreaSetEndTile(ownProps.id));\n  },\n  onMouseUp: () => {\n    dispatch(areaToggle());\n    dispatch(boardSelectedAreaUnset());\n  },\n});\n\nexport default connect(\n  mapState,\n  mapDispatchToProps\n)(React.memo(Tile));\n","import React from 'react';\nimport Tile from '../Tile';\nimport { Props, State, IBoardRow } from './Board.interfaces';\nimport styles from './Board.module.scss';\n\nconst arrayTo2DArray2 = (list: string[], howMany: number) => {\n  let idx = 0;\n  const result: any = [];\n\n  while (idx < list.length) {\n    if (idx % howMany === 0) result.push([]);\n    result[result.length - 1].push(list[idx++]);\n  };\n\n  return result;\n}\n\nconst Row = ({ tiles = [] }: IBoardRow) => (\n  <div className={styles.row}>\n    {tiles.map((tileId) => <Tile key={tileId} id={tileId} />)}\n  </div>\n);\n\nconst Board: React.FunctionComponent<Props & State> = ({\n  tiles = [],\n  columns,\n  onMouseLeave = () => {},\n}: Props & State) => {\n  const handleOnMouseLeave = () => {\n    onMouseLeave();\n  }\n  const renderRows = () => (\n    arrayTo2DArray2(tiles, columns)\n      .map((tilesInRow: any, i: number) => <Row key={`row_${i}`} tiles={tilesInRow} />)\n  );\n\n  return (\n    <div className={styles.board} onMouseLeave={handleOnMouseLeave}>\n      {renderRows()}\n    </div>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { getTilesList, getOptions } from '../../redux/selectors/board.selectors';\nimport { AppState } from '../../redux/reducers';\nimport { boardSelectedAreaUnset } from '../../redux/actions/board.actions';\nimport Board from './Board';\nimport { Props, State } from './Board.interfaces';\n\nconst mapState = (state: AppState): Props => ({\n  tiles: getTilesList(state),\n  columns: getOptions(state).columns,\n});\n\nconst mapDispatchToProps = (dispatch: Function): State => ({\n  onMouseLeave: () => dispatch(boardSelectedAreaUnset()),\n});\n\nexport default connect(\n  mapState,\n  mapDispatchToProps,\n)(React.memo(Board));\n","export default __webpack_public_path__ + \"static/media/undo.39673a2b.svg\";","import React from 'react';\nimport classNames from 'classnames';\nimport { Props, State } from './BtnReset.interfaces';\nimport logo from './undo.svg';\nimport styles from './BtnReset.module.scss';\n\nconst BtnReset: React.FunctionComponent<Props & State> = ({\n  className,\n  disabled = false,\n  onClick = () => {},\n}: Props  & State) => {\n  const handleClick = () => {\n    if(!disabled) {\n      onClick();\n    }\n  }\n\n  return (\n    <button\n      aria-label='reset'\n      disabled={disabled}\n      onClick={handleClick}\n      className={classNames(\n        styles.btn,\n        disabled && styles.disabled,\n        className,\n      )}\n    >\n      <img\n        src={logo}\n        alt=\"reset\"\n        className={styles.logo}\n      />\n    </button>\n  );\n};\n\nexport default BtnReset;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { boardReset } from '../../redux/actions/board.actions';\nimport { getFlippedTiles } from '../../redux/selectors/board.selectors';\nimport BtnReset from './BtnReset';\nimport { AppState } from '../../redux/reducers';\nimport { Props, State } from './BtnReset.interfaces';\n\nconst mapState = (state: AppState): Props => ({\n  disabled: !getFlippedTiles(state).length,\n});\n\nconst mapDispatchToProps = (dispatch: Function): State => ({\n  onClick: () => dispatch(boardReset()),\n});\n\nexport default connect(\n  mapState,\n  mapDispatchToProps\n)(React.memo(BtnReset));\n","import React from 'react';\nimport { Board } from './components/Board';\nimport { BtnReset } from './components/BtnReset';\nimport './App.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <Board />\n      <BtnReset />\n    </header>\n  </div>\n);\n\nexport default App;\n","import {\n  TILES_TOGGLE,\n  BOARD_RESET,\n  BOARD_SELECTEDAREA_UNSET,\n  BOARD_SELECTEDAREA_SET_INI,\n  BOARD_SELECTEDAREA_SET_END,\n} from \"../actions/action.types\";\nimport { getTileById } from '../selectors/board.selectors';\nimport { Action } from './';\n\nexport interface Tile {\n  id: string,\n  x: number,\n  y: number,\n  flipped: boolean,\n};\nexport interface Tiles {\n  allIds: string[],\n  byIds: {\n    [key: string]: Tile,\n  },\n};\nexport interface Options {\n  columns: number,\n  rows: number,\n};\nexport interface SelectedArea {\n  iniTile?: string,\n  endTile?: string,\n};\n\nexport interface State {\n  tiles: Tiles,\n  options: Options,\n  selectedArea: SelectedArea,\n};\n\nconst buildBoard2 = (size: number): Tiles => {\n  const byIds: { [key: string]: Tile } = {};\n  const allIds = [];\n  var count = 0;\n\n  for (let x = 0; x < size; x++) {\n    for (let y = 0; y < size; y++) {  \n      const id = count.toString();\n      allIds.push(id);\n      byIds[count] = {\n        id,\n        x,\n        y,\n        flipped: false,\n      };\n\n      count++;\n    };\n  };\n\n  return {\n    allIds,\n    byIds,\n  };\n}\n\nconst iniSize = 6;\nconst iniSelectedArea = {\n  iniTile: undefined,\n  endTile: undefined,\n};\nconst initialState: State = {\n  tiles: buildBoard2(iniSize),\n  options: {\n    columns: iniSize,\n    rows: iniSize,\n  },\n  selectedArea: iniSelectedArea,\n};\n\nconst reducer = (state: any = initialState, action: State & Action) => {\n  switch (action.type) {  \n      case TILES_TOGGLE:\n        const { ids = [], flipped } = action.payload;\n        const updatedTiles: any = {};\n\n        ids.forEach((id: string) => {\n          const tile = getTileById(state, id);\n          updatedTiles[tile.id] = {\n            ...tile,\n            flipped,\n          };\n        });\n\n        return {\n          ...state,\n          tiles: {\n            ...state.tiles,\n            byIds: {\n              ...state.tiles.byIds,\n              ...updatedTiles,\n            },\n          },\n        };\n\n    case BOARD_SELECTEDAREA_SET_INI:\n      const { iniTile = undefined } = action.payload;\n\n      return {\n        ...state,\n        selectedArea: {\n          ...state.selectedArea,\n          iniTile,\n        },\n      };\n    case BOARD_SELECTEDAREA_SET_END:\n      const { endTile = undefined } = action.payload;\n\n      return {\n        ...state,\n        selectedArea: {\n          ...state.selectedArea,\n          endTile,\n        },\n      };\n\n    case BOARD_SELECTEDAREA_UNSET:\n      return {\n        ...state,\n        selectedArea: iniSelectedArea,\n      };\n\n    case BOARD_RESET:\n      return initialState;\n    default:\n        return state;\n  };\n};\n\nexport default reducer;\n","// import { } from \"../actions/action.types\";\nimport { Action } from './';\nexport interface State {\n  name: string,\n}\n\nconst initialState: State = {\n  name: 'aitor',\n};\n\nconst reducer = (state = initialState, action: State & Action) => {\n  switch (action.type) {\n    default:\n      return state;\n  };\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport board, { State as StateBoard } from './board.reducers';\nimport common, { State as StateCommon } from './common.reducers';\n\nexport interface AppState {\n  board: StateBoard,\n  common: StateCommon,\n}\n\nexport interface Action {\n  type: string,\n  payload: {\n    [key: string]: any,\n  },\n}\n\nconst rootReducer = combineReducers({\n  common,\n  board,\n});\n\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from \"../reducers\";\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk)\n  )\n);\n\nexport default store;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport store from './redux/store'\nimport reportWebVitals from './reportWebVitals';\n\nconst rootElement = document.getElementById('root')\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  rootElement\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Tile_wrapper__ZVNjO\",\"tile\":\"Tile_tile__2AylM\",\"flipped\":\"Tile_flipped__2c1c5\",\"selected\":\"Tile_selected__9WI05\"};"],"sourceRoot":""}