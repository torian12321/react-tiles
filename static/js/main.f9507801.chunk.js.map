{"version":3,"sources":["components/BtnReset/BtnReset.module.scss","components/Board/Board.module.scss","redux/selectors/board.selectors.ts","redux/actions/action.types.ts","redux/actions/board.actions.ts","hooks/useCancellablePromises.js","hooks/useOnDoubleClick.ts","components/Tile/Tile.tsx","components/Tile/index.ts","components/Tile/Tile.container.tsx","components/Board/Board.tsx","components/Board/Board.container.tsx","components/BtnReset/undo.svg","components/BtnReset/BtnReset.tsx","components/BtnReset/BtnReset.container.tsx","App.tsx","redux/reducers/board.reducers.ts","redux/reducers/common.reducers.ts","redux/reducers/index.ts","redux/store/index.ts","reportWebVitals.ts","index.tsx","components/Tile/Tile.module.scss"],"names":["module","exports","getBoardState","state","board","getOptions","createSelector","options","getSelectedAreaOptions","selectedArea","getTilesState","tiles","getTilesList","allIds","getTilesById","byIds","getTileById","tileId","tile","selected","getTileIsSelected","getFlippedTiles","Object","values","filter","flipped","map","id","getTileseOnSelectedArea","iniTile","endTile","tilesArr","onRange","val","margin1","margin2","ini","find","end","x","y","includes","BOARD_RESET","BOARD_SELECTEDAREA_UNSET","BOARD_SELECTEDAREA_SET_INI","BOARD_SELECTEDAREA_SET_END","TILES_TOGGLE","tilesToggle","tilesId","type","payload","ids","columnToggle","dispatch","getState","col","byId","getTileByCol","t","boardSelectedAreaSetEndTile","boardSelectedAreaSetEndTileAction","useCancellablePromises","pendingPromises","useRef","appendPendingPromise","promise","current","removePendingPromise","p","clearPendingPromises","cancel","useOnDoubleClick","onClick","onDoubleClick","api","delay","get","waitForClick","isCanceled","Promise","resolve","reject","then","value","error","cancellablePromise","n","setTimeout","delayFunc","catch","errorInfo","Tile","isFlipped","isSelected","onMouseEnter","handleClick","handleDoubleClick","className","classNames","styles","wrapper","aria-label","connect","ownProps","tileToggle","React","memo","Row","row","Board","columns","onMouseLeave","list","howMany","idx","result","length","push","arrayTo2DArray2","tilesInRow","i","BtnReset","disabled","btn","src","logo","alt","App","iniSelectedArea","undefined","initialState","size","count","toString","buildBoard2","rows","reducer","action","updatedTiles","forEach","name","rootReducer","combineReducers","common","store","createStore","composeWithDevTools","applyMiddleware","thunk","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f9507801.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"BtnReset_btn__9ZNb5\",\"disabled\":\"BtnReset_disabled__2z6ma\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__kNpEF\",\"row\":\"Board_row__2hIxt\"};","import { createSelector } from 'reselect';\nimport { AppState } from '../reducers';\nimport { State as StateBoard, Options, SelectedArea, Tile, Tiles } from '../reducers/board.reducers';\n\nconst getBoardState = (state: AppState): StateBoard =>\n  state.board || state || {};\n\nexport const getOptions = createSelector(\n  getBoardState,\n  (board: StateBoard): Options =>\n  board.options || {}\n);\n\nexport const getSelectedAreaOptions = createSelector(\n  getBoardState,\n  (board: StateBoard): SelectedArea =>\n  board.selectedArea || {}\n);\n\n// Tiles Selectors\nconst getTilesState = createSelector(\n  getBoardState,\n  (board: StateBoard): Tiles =>\n  board.tiles || {}\n);\n\nexport const getTilesList = createSelector(\n  getTilesState,\n  (tiles: Tiles): string[] =>\n  tiles.allIds || []\n);\nconst getTilesById = createSelector(\n  getTilesState,\n  (tiles: Tiles): any =>\n  tiles.byIds || {}\n);\n\nexport const getTileById = (state: AppState, tileId: string): Tile & { selected: boolean } => {\n  const tile = getTilesById(state)[tileId] || {};\n  return {\n    ...tile,\n    selected: getTileIsSelected(state, tileId),\n  }\n}\n  \n\nexport const getTileByCol = (state: AppState, col: number): Tile[] => {\n  const byId = getTilesState(state).byIds || {};\n\n  return Object.values(byId)\n    .filter((tile: Tile) => tile.y === col);\n};\n\nexport const getFlippedTiles = createSelector(\n  getTilesById,\n  (tiles: Tiles): string[] =>\n    Object.values(tiles)\n      .filter((tile: Tile) => !!tile.flipped)\n      .map((tile: Tile) => tile.id)\n);\n\nexport const getTileseOnSelectedArea = createSelector(\n  [getTilesById, getSelectedAreaOptions],\n  (tiles: Tiles, selectedArea: SelectedArea): string[] => {\n    const { iniTile, endTile } = selectedArea;\n    const tilesArr = Object.values(tiles);\n  \n    if (!iniTile || !endTile) {\n      return [];\n    };\n    if (iniTile === endTile) {\n      return [iniTile];\n    };\n\n    const onRange = (val: number, margin1: number, margin2: number) => !!(\n      (val >= margin1 && val <= margin2) ||\n      (val >= margin2 && val <= margin1)\n    );\n\n    const ini = tilesArr.find((tile: Tile) => tile.id === iniTile);\n    const end = tilesArr.find((tile: Tile) => tile.id === endTile);\n\n    return tilesArr\n      .filter((tile: Tile) => (\n        // Get tiles on the 'square' of the aera\n        onRange(tile.x, ini.x, end.x) &&\n        onRange(tile.y, ini.y, end.y)\n      ))\n      .map((tile: Tile) => tile.id);;\n  }\n);\n\n// Detect if the tile is under selected area\nexport const getTileIsSelected = (state: AppState, tileId: string): boolean =>\n  !!getTileseOnSelectedArea(state).includes(tileId);\n","export const BOARD_RESET = \"BOARD_RESET\";\n\nexport const BOARD_SELECTEDAREA_UNSET = \"BOARD_SELECTEDAREA_UNSET\";\nexport const BOARD_SELECTEDAREA_SET_INI = \"BOARD_SELECTEDAREA_SET_INI\";\nexport const BOARD_SELECTEDAREA_SET_END = \"BOARD_SELECTEDAREA_SET_END\";\n\nexport const TILES_TOGGLE = \"TILES_TOGGLE\";\n","import {\n  BOARD_RESET,\n  TILES_TOGGLE,\n  BOARD_SELECTEDAREA_UNSET,\n  BOARD_SELECTEDAREA_SET_INI,\n  BOARD_SELECTEDAREA_SET_END,\n} from './action.types';\nimport { getTileById, getTileByCol, getSelectedAreaOptions, getTileseOnSelectedArea } from '../selectors/board.selectors';\nimport { Tile } from '../reducers/board.reducers';\n\nexport const boardReset = () => ({\n  type: BOARD_RESET,\n});\n\nexport const tilesToggle = (\n  tilesId: string[] = [],\n  flipped: boolean = false\n) => ({\n  type: TILES_TOGGLE,\n  payload: {\n    ids: tilesId,\n    flipped,\n  },\n});\n\nexport const tileToggle = (tileId: string): Object => (\n  dispatch: any,\n  getState: Function\n) => {\n  const state = getState();\n  const tile = getTileById(state, tileId);\n\n  dispatch(tilesToggle(\n    [tile.id],\n    !tile.flipped\n  ));\n};\n\n// Flip the full column from the indicated tale\nexport const columnToggle = (tileId: string): Object => (\n  dispatch: any,\n  getState: Function\n) => {\n  const state = getState();\n  const tile = getTileById(state, tileId);\n\n  dispatch(tilesToggle(\n    getTileByCol(state, tile.y).map((t: Tile) => t.id),\n    !tile.flipped\n  ));\n};\n\n// Flip all tiles on selectedArea based on initila tile selected\nexport const areaToggle = (): Object => (\n  dispatch: any,\n  getState: Function\n) => {\n  const state = getState();\n  const iniTileId = getSelectedAreaOptions(state).iniTile;\n\n  if(!!iniTileId) {\n    const tile = getTileById(state, iniTileId);\n\n    dispatch(tilesToggle(\n      getTileseOnSelectedArea(state),\n      !tile.flipped\n    ));\n  };\n};\n\nexport const boardSelectedAreaUnset = () => ({\n  type: BOARD_SELECTEDAREA_UNSET,\n});\nexport const boardSelectedAreaSetIniTile = (tileId: string) => ({\n  type: BOARD_SELECTEDAREA_SET_INI,\n  payload: {\n    iniTile: tileId,\n  },\n});\nconst boardSelectedAreaSetEndTileAction = (tileId: string) => ({\n  type: BOARD_SELECTEDAREA_SET_END,\n  payload: {\n    endTile: tileId,\n  },\n});\n\nexport const boardSelectedAreaSetEndTile = (tileId: string): Object => (\n  dispatch: any,\n  getState: Function\n) => {\n  const state = getState();\n  const iniTileId = getSelectedAreaOptions(state).iniTile;\n\n  if(!!iniTileId) {\n    dispatch (boardSelectedAreaSetEndTileAction(tileId));\n  };\n};","import { useRef } from \"react\";\n\nconst useCancellablePromises = () => {\n  const pendingPromises = useRef([]);\n\n  const appendPendingPromise = promise =>\n    pendingPromises.current = [...pendingPromises.current, promise];\n\n  const removePendingPromise = promise =>\n    pendingPromises.current = pendingPromises.current.filter(p => p !== promise);\n\n  const clearPendingPromises = () => pendingPromises.current.map(p => p.cancel());\n\n  const api = {\n    appendPendingPromise,\n    removePendingPromise,\n    clearPendingPromises,\n  };\n\n  return api;\n};\n\nexport default useCancellablePromises;\n","// https://medium.com/trabe/prevent-click-events-on-double-click-with-react-with-and-without-hooks-6bf3697abc40\n\nimport { get } from 'lodash';\nimport useCancellablePromises from './useCancellablePromises';\n\nconst DELAY_DEFAULT = 300;\n\nconst delayFunc = (n: number = DELAY_DEFAULT) => new Promise(resolve => setTimeout(resolve, n));\nconst cancellablePromise = (promise: Promise<any>) => {\n  let isCanceled = false;\n\n  const wrappedPromise = new Promise((resolve, reject) => {\n    promise.then(\n      (value: boolean) => (isCanceled ? reject({ isCanceled, value }) : resolve(value)),\n      (error: any) => reject({ isCanceled, error }),\n    );\n  });\n\n  return {\n    promise: wrappedPromise,\n    cancel: () => (isCanceled = true),\n  };\n};\n\nexport const useOnDoubleClick = (\n  onClick: Function,\n  onDoubleClick: Function,\n  options?: {\n    delay: number,\n  }\n) => {\n  const api = useCancellablePromises();\n  const delay = get(options, 'delay', DELAY_DEFAULT)\n  // const { delay = 100 } = options;\n\n  const handleClick = () => {\n    api.clearPendingPromises();\n    const waitForClick = cancellablePromise(delayFunc(delay));\n    api.appendPendingPromise(waitForClick);\n\n    return waitForClick.promise\n      .then(() => {\n        api.removePendingPromise(waitForClick);\n        onClick();\n      })\n      .catch(errorInfo => {\n        api.removePendingPromise(waitForClick);\n        if (!errorInfo.isCanceled) {\n          throw errorInfo.error;\n        }\n      });\n  };\n\n  const handleDoubleClick = () => {\n    api.clearPendingPromises();\n    onDoubleClick();\n  };\n\n  return [handleClick, handleDoubleClick];\n};\n\nexport default useOnDoubleClick;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Props, State } from './Tile.interfaces';\nimport styles from './Tile.module.scss';\nimport useOnDoubleClick from \"../../hooks/useOnDoubleClick\";\n\n\nconst Tile: React.FunctionComponent<Props & State> = ({\n  id, isFlipped = false, isSelected = false,\n  onClick, onDoubleClick, onMouseEnter,\n}: Props & State) => {\n  const [handleClick, handleDoubleClick] = useOnDoubleClick(onClick, onDoubleClick);\n\n  const handlePress = () => {\n    // console.log('abcccc');\n    // onDoubleClick();\n    onMouseEnter();\n  };\n  // console.log(id)\n  return (\n    <div\n      className={classNames(\n        styles.wrapper,\n        isFlipped && styles.flipped,\n        isSelected && styles.selected,\n        // isFlipped && styles.tile_flipped,\n      )}\n    >\n      <button\n        aria-label={`tile-${id}`}\n        onClick={handleClick}\n        onDoubleClick={handleDoubleClick}\n        onMouseEnter={handlePress}\n        // onMouseDown={handlePress}\n        className={classNames(\n          styles.tile,\n          // isSelected && styles.tile_selected,\n          // isFlipped && styles.tile_flipped,\n        )}\n      >{id}\n      </button>\n    </div>\n  );\n};\n\nexport default Tile;\n","import Tile from './Tile.container';\n\nexport default Tile;\nexport { Tile };\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { getTileById } from '../../redux/selectors/board.selectors';\nimport { AppState } from '../../redux/reducers';\nimport {\n  tileToggle,\n  columnToggle,\n  boardSelectedAreaSetEndTile,\n  boardSelectedAreaSetIniTile,\n} from '../../redux/actions/board.actions';\nimport Tile from './Tile';\nimport { Props, State } from './Tile.interfaces';\n\nconst mapState = (state: AppState, ownProps: Props): Props => {\n  const tile = getTileById(state, ownProps.id);\n\n  return {\n    id: tile.id,\n    isFlipped: tile.flipped,\n    isSelected: tile.selected,\n  };\n};\nconst mapDispatchToProps = (dispatch: Function, ownProps: Props): State => ({\n  onClick: () => {\n    dispatch(boardSelectedAreaSetIniTile(ownProps.id));\n    dispatch(tileToggle(ownProps.id));\n  },\n  onDoubleClick: () => dispatch(columnToggle(ownProps.id)),\n  onMouseEnter: () => dispatch(boardSelectedAreaSetEndTile(ownProps.id)),\n});\n\nexport default connect(\n  mapState,\n  mapDispatchToProps\n)(React.memo(Tile));\n","import React from 'react';\nimport Tile from '../Tile';\nimport { Props, State, IBoardRow } from './Board.interfaces';\nimport styles from './Board.module.scss';\n\nconst arrayTo2DArray2 = (list: string[], howMany: number) => {\n  let idx = 0;\n  const result: any = [];\n\n  while (idx < list.length) {\n    if (idx % howMany === 0) result.push([]);\n    result[result.length - 1].push(list[idx++]);\n  };\n\n  return result;\n}\n\nconst Row = ({ tiles = [] }: IBoardRow) => (\n  <div className={styles.row}>\n    {tiles.map((tileId) => <Tile key={tileId} id={tileId} />)}\n  </div>\n);\n\nconst Board: React.FunctionComponent<Props & State> = ({\n  tiles = [],\n  columns,\n  onMouseLeave = () => {},\n}: Props & State) => {\n  const handleOnMouseLeave = () => {\n    onMouseLeave();\n  }\n  const renderRows = () => (\n    arrayTo2DArray2(tiles, columns)\n      .map((tilesInRow: any, i: number) => <Row key={`row_${i}`} tiles={tilesInRow} />)\n  );\n\n  return (\n    <div className={styles.board} onMouseLeave={handleOnMouseLeave}>\n      {renderRows()}\n    </div>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { getTilesList, getOptions } from '../../redux/selectors/board.selectors';\nimport { AppState } from '../../redux/reducers';\nimport { boardSelectedAreaUnset } from '../../redux/actions/board.actions';\nimport Board from './Board';\nimport { Props, State } from './Board.interfaces';\n\nconst mapState = (state: AppState): Props => ({\n  tiles: getTilesList(state),\n  columns: getOptions(state).columns,\n});\n\nconst mapDispatchToProps = (dispatch: Function): State => ({\n  onMouseLeave: () => dispatch(boardSelectedAreaUnset()),\n});\n\nexport default connect(\n  mapState,\n  mapDispatchToProps,\n)(React.memo(Board));\n","export default __webpack_public_path__ + \"static/media/undo.39673a2b.svg\";","import React from 'react';\nimport classNames from 'classnames';\nimport { Props, State } from './BtnReset.interfaces';\nimport logo from './undo.svg';\nimport styles from './BtnReset.module.scss';\n\nconst BtnReset: React.FunctionComponent<Props & State> = ({\n  className,\n  disabled = false,\n  onClick = () => {},\n}: Props  & State) => {\n  const handleClick = () => {\n    if(!disabled) {\n      onClick();\n    }\n  }\n\n  return (\n    <button\n      aria-label='reset'\n      disabled={disabled}\n      onClick={handleClick}\n      className={classNames(\n        styles.btn,\n        disabled && styles.disabled,\n        className,\n      )}\n    >\n      <img\n        src={logo}\n        alt=\"reset\"\n        className={styles.logo}\n      />\n    </button>\n  );\n};\n\nexport default BtnReset;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { boardReset } from '../../redux/actions/board.actions';\nimport { getFlippedTiles } from '../../redux/selectors/board.selectors';\nimport BtnReset from './BtnReset';\nimport { AppState } from '../../redux/reducers';\nimport { Props, State } from './BtnReset.interfaces';\n\nconst mapState = (state: AppState): Props => ({\n  disabled: !getFlippedTiles(state).length,\n});\n\nconst mapDispatchToProps = (dispatch: Function): State => ({\n  onClick: () => dispatch(boardReset()),\n});\n\nexport default connect(\n  mapState,\n  mapDispatchToProps\n)(React.memo(BtnReset));\n","import React from 'react';\nimport { Board } from './components/Board';\nimport { BtnReset } from './components/BtnReset';\nimport './App.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <Board />\n      <BtnReset />\n    </header>\n  </div>\n);\n\nexport default App;\n","import {\n  TILES_TOGGLE,\n  BOARD_RESET,\n  BOARD_SELECTEDAREA_UNSET,\n  BOARD_SELECTEDAREA_SET_INI,\n  BOARD_SELECTEDAREA_SET_END,\n} from \"../actions/action.types\";\nimport { getTileById } from '../selectors/board.selectors';\nimport { Action } from './';\n\nexport interface Tile {\n  id: string,\n  x: number,\n  y: number,\n  flipped: boolean,\n};\nexport interface Tiles {\n  allIds: string[],\n  byIds: {\n    [key: string]: Tile,\n  },\n};\nexport interface Options {\n  columns: number,\n  rows: number,\n};\nexport interface SelectedArea {\n  iniTile?: string,\n  endTile?: string,\n};\n\nexport interface State {\n  tiles: Tiles,\n  options: Options,\n  selectedArea: SelectedArea,\n};\n\nconst buildBoard2 = (size: number): Tiles => {\n  const byIds: { [key: string]: Tile } = {};\n  const allIds = [];\n  var count = 0;\n\n  for (let x = 0; x < size; x++) {\n    for (let y = 0; y < size; y++) {  \n      const id = count.toString();\n      allIds.push(id);\n      byIds[count] = {\n        id,\n        x,\n        y,\n        flipped: false,\n      };\n\n      count++;\n    };\n  };\n\n  return {\n    allIds,\n    byIds,\n  };\n}\n\nconst iniSize = 6;\nconst iniSelectedArea = {\n  iniTile: undefined,\n  endTile: undefined,\n};\nconst initialState: State = {\n  tiles: buildBoard2(iniSize),\n  options: {\n    columns: iniSize,\n    rows: iniSize,\n  },\n  selectedArea: iniSelectedArea,\n};\n\nconst reducer = (state: any = initialState, action: State & Action) => {\n  switch (action.type) {  \n      case TILES_TOGGLE:\n        const { ids = [], flipped } = action.payload;\n        const updatedTiles: any = {};\n\n        ids.forEach((id: string) => {\n          const tile = getTileById(state, id);\n          updatedTiles[tile.id] = {\n            ...tile,\n            flipped,\n          };\n        });\n\n        return {\n          ...state,\n          tiles: {\n            ...state.tiles,\n            byIds: {\n              ...state.tiles.byIds,\n              ...updatedTiles,\n            },\n          },\n        };\n\n    case BOARD_SELECTEDAREA_SET_INI:\n      const { iniTile = undefined } = action.payload;\n\n      return {\n        ...state,\n        selectedArea: {\n          ...state.selectedArea,\n          iniTile,\n        },\n      };\n    case BOARD_SELECTEDAREA_SET_END:\n      const { endTile = undefined } = action.payload;\n\n      return {\n        ...state,\n        selectedArea: {\n          ...state.selectedArea,\n          endTile,\n        },\n      };\n\n    case BOARD_SELECTEDAREA_UNSET:\n      return {\n        ...state,\n        selectedArea: iniSelectedArea,\n      };\n\n    case BOARD_RESET:\n      return initialState;\n    default:\n        return state;\n  };\n};\n\nexport default reducer;\n","// import { } from \"../actions/action.types\";\nimport { Action } from './';\nexport interface State {\n  name: string,\n}\n\nconst initialState: State = {\n  name: 'aitor',\n};\n\nconst reducer = (state = initialState, action: State & Action) => {\n  switch (action.type) {\n    default:\n      return state;\n  };\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport board, { State as StateBoard } from './board.reducers';\nimport common, { State as StateCommon } from './common.reducers';\n\nexport interface AppState {\n  board: StateBoard,\n  common: StateCommon,\n}\n\nexport interface Action {\n  type: string,\n  payload: {\n    [key: string]: any,\n  },\n}\n\nconst rootReducer = combineReducers({\n  common,\n  board,\n});\n\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from \"../reducers\";\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk)\n  )\n);\n\nexport default store;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport store from './redux/store'\nimport reportWebVitals from './reportWebVitals';\n\nconst rootElement = document.getElementById('root')\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  rootElement\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Tile_wrapper__ZVNjO\",\"flipped\":\"Tile_flipped__2c1c5\",\"selected\":\"Tile_selected__9WI05\",\"tile\":\"Tile_tile__2AylM\"};"],"sourceRoot":""}